from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters, CommandHandler, JobQueue
import requests
from bs4 import BeautifulSoup
import logging

import asyncio
import time
import traceback
from datetime import datetime
from flask import Flask, jsonify
import threading
import os

# Token'ƒ± Railway Variables'tan al
API_KEY = os.getenv('TELEGRAM_TOKEN')
if not API_KEY:
    print("‚ùå TELEGRAM_TOKEN bulunamadƒ±! Railway Variables'e ekleyin.")
    exit(1)

# === Loglama Ayarlarƒ± ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


# === OBS URL'leri ===
BASE_URL = "https://obs.itu.edu.tr/public/DersProgram/DersProgramSearch"
MAIN_URL = "https://obs.itu.edu.tr/public/DersProgram"
DERS_KAYIT_URL = "https://obs.itu.edu.tr/ogrenci/DersKayitIslemleri/DersKayit"

# === Takip Edilen Dersler ===
WATCHED_COURSES = {}  # {chat_id: [(program_code, crn), ...]}

# Rate-limiting i√ßin global deƒüi≈üken
LAST_REQUEST_TIME = {}  # {chat_id: son_istek_zamanƒ±}

def load_program_codes():
    """OBS sayfasƒ±ndan program kodlarƒ±nƒ± ve value ID'lerini y√ºkle"""
    print("üîÑ Program kodlarƒ± y√ºkleniyor...")

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
        'Accept-Language': 'tr-TR,tr;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

    try:
        response = requests.get(MAIN_URL, headers=headers, timeout=15)
        print(f"üåê MAIN_URL status: {response.status_code}")
        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        select_element = soup.find('select', {'id': 'dersBransKoduId'})

        if not select_element:
            print("‚ùå #dersBransKoduId select elementi bulunamadƒ±!")
            print("üìã Fallback manuel listesi kullanƒ±lƒ±yor...")
            return get_manual_program_list()

        program_codes = {}
        options = select_element.find_all('option')
        print(f"üìã Toplam {len(options)} option bulundu")

        valid_count = 0
        for option in options:
            value = option.get('value', '').strip()
            text = option.text.strip()

            if value and text and text != 'Ders Kodu Se√ßiniz' and len(text) >= 3:
                program_codes[text] = value
                valid_count += 1
                if valid_count <= 10:
                    print(f"   üìÇ {text:<6} -> {value} (value='{value}', text='{text}')")

        print(f"‚úÖ {len(program_codes)} ge√ßerli program kodu y√ºklendi")

        test_codes = ['END', 'TUR', 'KIM', 'MAT', 'FIZ', 'BIL', 'ELE', 'MAK']
        print(f"\nüîç Pop√ºler kodlar kontrol√º:")
        for kod in test_codes:
            if kod in program_codes:
                print(f"   ‚úÖ {kod:<6} -> {program_codes[kod]}")
            else:
                print(f"   ‚ùå {kod:<6} Y√úKLENEMEDƒ∞!")

        if len(program_codes) < 10:
            print("‚ö†Ô∏è  Az program kodu y√ºklendi, manuel listeye d√∂n√ºl√ºyor...")
            return get_manual_program_list()

        return program_codes

    except requests.exceptions.RequestException as e:
        print(f"‚ùå Network hatasƒ±: {e}")
        return get_manual_program_list()
    except Exception as e:
        print(f"‚ùå Beklenmeyen hata: {e}")
        return get_manual_program_list()


def get_manual_program_list():
    """Manuel program listesi - HTML'den doƒürulanmƒ±≈ü"""
    print("üìã Manuel program listesi y√ºkleniyor...")

    manual_list = {
        'AKM': '42', 'ALM': '227', 'ARB': '305', 'ARC': '302', 'ATA': '43',
        'BBF': '310', 'BEB': '200', 'BED': '149', 'BEN': '165', 'BES': '313',
        'BHB': '321', 'BIL': '38', 'BIO': '30', 'BLG': '3', 'BLS': '180',
        'BUS': '155', 'CAB': '127', 'CEN': '304', 'CEV': '7', 'CHA': '169',
        'CHE': '137', 'CHZ': '81', 'CIE': '142', 'CIN': '245', 'CMP': '146',
        'COM': '208', 'CVH': '168', 'DAN': '243', 'DEN': '10', 'DFH': '163',
        'DGH': '181', 'DNK': '44', 'DUI': '32', 'EAS': '141', 'ECN': '232',
        'ECO': '154', 'EEE': '289', 'EEF': '294', 'EFN': '297', 'EGC': '320',
        'EHA': '182', 'EHB': '196', 'EHN': '241', 'EKO': '39', 'ELE': '59',
        'ELH': '2', 'ELK': '1', 'ELT': '178', 'END': '15', 'ENE': '183',
        'ENG': '179', 'ENR': '207', 'ENT': '225', 'ESL': '140', 'ESM': '164',
        'ETK': '110', 'EUT': '22', 'FIZ': '28', 'FRA': '226', 'FZK': '175',
        'GED': '138', 'GEM': '11', 'GEO': '74', 'GID': '4', 'GLY': '162',
        'GMI': '46', 'GMK': '176', 'GMZ': '109', 'GSB': '53', 'GSN': '173',
        'GUV': '31', 'GVT': '177', 'GVZ': '111', 'HSS': '256', 'HUK': '41',
        'IAD': '301', 'ICM': '63', 'IEB': '314', 'ILT': '253', 'IML': '112',
        'IND': '300', 'ING': '33', 'INS': '8', 'INT': '317', 'ISE': '153',
        'ISH': '231', 'ISL': '14', 'ISP': '228', 'ITA': '255', 'ITB': '50',
        'JDF': '9', 'JEF': '19', 'JEO': '18', 'JPN': '202', 'KIM': '27',
        'KMM': '6', 'KMP': '125', 'KON': '58', 'LAT': '156', 'MAD': '16',
        'MAK': '12', 'MAL': '48', 'MAR': '148', 'MAT': '26', 'MCH': '160',
        'MDN': '293', 'MEK': '47', 'MEN': '258', 'MET': '5', 'MIM': '20',
        'MKN': '184', 'MMD': '290', 'MOD': '150', 'MRE': '157', 'MRT': '158',
        'MST': '257', 'MTH': '143', 'MTK': '174', 'MTM': '260', 'MTO': '23',
        'MTR': '199', 'MUH': '29', 'MUK': '40', 'MUT': '126', 'MUZ': '128',
        'MYZ': '309', 'NAE': '259', 'NTH': '263', 'NUM': '318', 'ODS': '161',
        'OSN': '319', 'PAZ': '151', 'PEM': '64', 'PET': '17', 'PHE': '262',
        'PHY': '147', 'PREP': '203', 'RES': '36', 'ROS': '307', 'RUS': '237',
        'SAV': '322', 'SBP': '21', 'SEC': '308', 'SED': '288', 'SEN': '171',
        'SES': '124', 'SGI': '291', 'SNT': '193', 'SPA': '172', 'STA': '37',
        'STI': '159', 'SUS': '303', 'TDW': '261', 'TEB': '121', 'TEK': '13',
        'TEL': '57', 'TER': '49', 'TES': '269', 'THO': '129', 'TRN': '65',
        'TRS': '215', 'TRZ': '170', 'TUR': '34', 'UCK': '25', 'ULP': '195',
        'UZB': '24', 'VBA': '306', 'X100': '198', 'YAN': '323', 'YTO': '213',
        'YZV': '221'
    }

    print(f"‚úÖ Manuel listeden {len(manual_list)} program y√ºklendi")
    print("   üìÇ END -> 15")
    print("   üìÇ TUR -> 34")
    print("   üìÇ KIM -> 27")
    print("   üìÇ MAT -> 26")
    print("   üìÇ BHB -> 321")

    return manual_list


# Program kodlarƒ±nƒ± y√ºkle (global)
PROGRAM_KODLARI = load_program_codes()


async def check_course(context: ContextTypes.DEFAULT_TYPE):
    """Arka planda dersleri kontrol et ve kontenjan a√ßƒ±lƒ±nca bildir"""
    job = context.job
    chat_id, program_code, crn = job.data

    print(f"‚è≤Ô∏è [DAKƒ∞KALIK KONTROL] {chat_id} i√ßin {program_code}_{crn} kontrol ediliyor...")

    # Rate-limiting: Son istekten bu yana 2 saniye ge√ßti mi?
    current_time = time.time()
    if chat_id in LAST_REQUEST_TIME:
        elapsed = current_time - LAST_REQUEST_TIME[chat_id]
        if elapsed < 2:
            await asyncio.sleep(2 - elapsed)

    result = search_course(program_code, crn, is_background=True)

    # Son istek zamanƒ±nƒ± g√ºncelle
    LAST_REQUEST_TIME[chat_id] = time.time()

    if result:
        await context.bot.send_message(
            chat_id=chat_id,
            text=result,
            parse_mode='Markdown'
        )
        # Kontenjan a√ßƒ±ldƒ±ysa, takibi durdur
        if "KONTENJAN A√áILDI" in result:
            print(f"üõë {program_code}_{crn} i√ßin takip durduruldu (kontenjan a√ßƒ±ldƒ±)")
            WATCHED_COURSES[chat_id].remove((program_code, crn))
            if not WATCHED_COURSES[chat_id]:
                del WATCHED_COURSES[chat_id]
            context.application.job_queue.remove_job(job.name)


def search_course(program_code, crn, is_background=False):
    """Belirtilen program kodunda CRN ile dersi ara - KONTENJAN TAKƒ∞P"""
    print(f"\nüîç {program_code} programƒ±nda CRN {crn} aranƒ±yor... {'[ARKA PLAN]' if is_background else ''}")

    if program_code not in PROGRAM_KODLARI:
        mevcut_kodlar = sorted([k for k in PROGRAM_KODLARI.keys() if len(k) == 3])[:10]
        mevcut_liste = ", ".join(mevcut_kodlar)

        print(f"‚ùå '{program_code}' program kodu bulunamadƒ±!")
        print(f"   üìã Mevcut kodlar: {mevcut_kodlar[:5]}...")

        error_message = (
            f"‚ùå *'{program_code}' program kodu bulunamadƒ±*\n\n"
            f"üîç *Mevcut program kodlarƒ±:*\n"
            f"`{mevcut_liste}...`\n\n"
            f"üìã *Pop√ºler program kodlarƒ±:*\n"
            f"‚Ä¢ `END` - End√ºstri M√ºh. (ƒ∞ngilizce)\n"
            f"‚Ä¢ `TUR` - T√ºrk√ße Programlar\n"
            f"‚Ä¢ `MAT` - Matematik\n"
            f"‚Ä¢ `FIZ` - Fizik\n"
            f"‚Ä¢ `KIM` - Kimya\n"
            f"‚Ä¢ `BIL` - Bilgisayar M√ºh.\n"
            f"‚Ä¢ `ELE` - Elektrik-Elektronik\n"
            f"‚Ä¢ `MAK` - Makine M√ºh.\n\n"
            f"üí° *Doƒüru format: `END_12345`*\n"
            f"‚ùì *Yardƒ±m i√ßin: /help*"
        )
        return error_message

    program_id = PROGRAM_KODLARI[program_code]
    print(f"‚úÖ '{program_code}' bulundu! OBS ID: {program_id}")

    params = {
        'ProgramSeviyeTipiAnahtari': 'LS',
        'DersBransKoduId': program_id
    }

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Referer': MAIN_URL,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'tr-TR,tr;q=0.9,en;q=0.8',
        'Connection': 'keep-alive',
    }

    try:
        print(f"üåê OBS sorgusu yapƒ±lƒ±yor...")
        print(f"   üìã Parametreler: LS={params['ProgramSeviyeTipiAnahtari']}, ID={params['DersBransKoduId']}")

        response = requests.get(BASE_URL, params=params, headers=headers, timeout=15)
        print(f"   üìä HTTP Status: {response.status_code}")
        print(f"   üìè Response uzunluk: {len(response.text)} karakter")

        if response.status_code != 200:
            print(f"‚ùå HTTP {response.status_code} hatasƒ±")
            return f"‚ùå *OBS baƒülantƒ± hatasƒ±* (HTTP {response.status_code})\n\nüîÑ *Biraz sonra tekrar deneyin*"

        soup = BeautifulSoup(response.text, 'html.parser')

        table = soup.find('table', {'id': 'dersProgramContainer'})
        if not table:
            table = soup.find('table')
            if not table:
                print("‚ùå Hi√ßbir tablo bulunamadƒ±")
                return f"‚ùå *Ders listesi y√ºklenemedi*\n\nüîÑ *L√ºtfen tekrar deneyin*"
            print("‚ö†Ô∏è  ID'siz tablo kullanƒ±ldƒ±")

        tbody = table.find('tbody')
        if not tbody:
            print("‚ùå Tablo body bulunamadƒ±")
            return f"‚ùå *Ders verisi y√ºklenemedi*\n\nüîÑ *L√ºtfen tekrar deneyin*"

        rows = tbody.find_all('tr')
        print(f"üìã {len(rows)} ders satƒ±rƒ± bulundu")

        if not rows:
            return (
                f"‚ùå *'{program_code}' programƒ±nda ders bulunamadƒ±*\n\n"
                f"üí° *Bu d√∂nemde ders kaydƒ± yok olabilir*\n"
                f"üîÑ *Farklƒ± program veya d√∂nem deneyin*"
            )

        course_found = False
        for row_index, row in enumerate(rows):
            cells = row.find_all('td')
            if len(cells) < 11:
                continue

            columns = [cell.get_text(strip=True) for cell in cells]
            if len(columns) < 11:
                continue

            if row_index == 0:
                print(f"üìä ƒ∞LK SATIR KOLONLARI ({len(columns)} adet):")
                for i, col in enumerate(columns[:12]):
                    print(f"   [{i:2d}] '{col}'")
                if len(columns) > 10:
                    print(f"   [ 9] KONTENJAN: '{columns[9]}'")
                    print(f"   [10] YAZILAN:  '{columns[10]}'")

            if columns[0].strip() == crn:
                course_code = columns[1] if len(columns) > 1 else "Bilinmeyen"
                course_name = columns[2] if len(columns) > 2 else "Ders adƒ± yok"
                time_slot = columns[7] if len(columns) > 7 else "Bilinmeyen"
                day = columns[6] if len(columns) > 6 else "Bilinmeyen"

                try:
                    kontenjan_text = columns[9] if len(columns) > 9 else "0"
                    yazilan_text = columns[10] if len(columns) > 10 else "0"

                    kontenjan = int(kontenjan_text) if kontenjan_text.isdigit() else 0
                    yazilan = int(yazilan_text) if yazilan_text.isdigit() else 0
                    bos_yer = max(0, kontenjan - yazilan)

                    print(f"‚úÖ DERS BULUNDU!")
                    print(f"   üìò Kod: {course_code}")
                    print(f"   üìñ Ad: {course_name}")
                    print(f"   üïí Zaman: {day} {time_slot}")
                    print(f"   üìä Kontenjan: {kontenjan} (text='{kontenjan_text}') [KOLON 9]")
                    print(f"   üìù Yazƒ±lan: {yazilan} (text='{yazilan_text}') [KOLON 10]")
                    print(f"   üü¢ Bo≈ü: {bos_yer}")

                except (ValueError, IndexError) as e:
                    print(f"‚ö†Ô∏è  Kontenjan parse hatasƒ±: {e}")
                    try:
                        kontenjan = int(columns[-3]) if len(columns) >= 3 and columns[-3].isdigit() else 0
                        yazilan = int(columns[-2]) if len(columns) >= 2 and columns[-2].isdigit() else 0
                        bos_yer = max(0, kontenjan - yazilan)
                        print(f"   üîÑ Fallback: Kontenjan={kontenjan}, Yazƒ±lan={yazilan}")
                    except:
                        print("   ‚ùå Fallback bile ba≈üarƒ±sƒ±z")
                        kontenjan = yazilan = bos_yer = 0

                course_found = True

                # üö® KONTENJAN KONTROL√ú üö®
                if bos_yer > 0:
                    # Kontenjan A√áILDI ‚Üí Detaylƒ± bildirim
                    print(f"üü¢ KONTENJAN A√áILDI! ({bos_yer} yer)")
                    return (
                        f"üü¢ *KONTENJAN A√áILDI!*\n"
                        f"{'‚îÅ' * 35}\n"
                        f"üìò *Ders Kodu:* `{course_code}`\n"
                        f"üìñ *Ders Adƒ±:* {course_name}\n"
                        f"üîó *Program:* `{program_code}`\n"
                        f"üÜî *CRN:* `{crn}`\n"
                        f"üïí *Zaman:* {day} {time_slot}\n"
                        f"{'‚îÅ' * 35}\n"
                        f"üë• *Kontenjan:* {kontenjan}\n"
                        f"üìù *Yazƒ±lan:* {yazilan}\n"
                        f"üü¢ *Bo≈ü Yer:* {bos_yer}\n"
                        f"{'‚îÅ' * 35}\n"
                        f"üîó *Kayƒ±t Linki:*\n{DERS_KAYIT_URL}\n\n"
                        f"üì± *Hƒ±zlƒ±ca kayƒ±t olun!*"
                    )
                else:
                    # Kontenjan YOK ‚Üí Onay mesajƒ± (ilk sorguda)
                    if not is_background:
                        print(f"üî¥ Kontenjan yok, takip ediliyor")
                        return (
                            f"üî¥ *Kontenjan yok!*\n"
                            f"üìò *Ders:* `{course_code}`\n"
                            f"üÜî *CRN:* `{crn}`\n"
                            f"‚è≥ *Kontenjan a√ßƒ±lƒ±nca bildirim g√∂nderilecek.*"
                        )
                    else:
                        # Arka planda, sessiz kal
                        print(f"üî¥ [ARKA PLAN] Kontenjan yok, bildirim g√∂nderilmedi")
                        return None

            if row_index < 3:
                kont_text = columns[9] if len(columns) > 9 else 'N/A'
                yaz_text = columns[10] if len(columns) > 10 else 'N/A'
                bos_temp = max(0, int(kont_text) - int(yaz_text)) if kont_text.isdigit() and yaz_text.isdigit() else 0
                print(
                    f"   Debug {row_index + 1}: CRN='{columns[0]}', Kod='{columns[1] if len(columns) > 1 else 'N/A'}', Kont='{kont_text}' [9], Yaz='{yaz_text}' [10], Bo≈ü={bos_temp}")

        if not course_found:
            print(f"‚ùå CRN '{crn}' '{program_code}' programƒ±nda bulunamadƒ±")
            sample_crns = []
            sample_kontenjan = []
            bos_listesi = []
            for row in rows[:5]:
                cells = row.find_all('td')
                if len(cells) >= 11:
                    columns = [cell.get_text(strip=True) for cell in cells]
                    if len(columns) >= 11:
                        crn_sample = columns[0]
                        kont_sample = columns[9] if len(columns) > 9 else '0'
                        yaz_sample = columns[10] if len(columns) > 10 else '0'
                        bos_sample = max(0, int(kont_sample) - int(
                            yaz_sample)) if kont_sample.isdigit() and yaz_sample.isdigit() else 0

                        sample_crns.append(crn_sample)
                        sample_kontenjan.append(f"{kont_sample}/{yaz_sample}")
                        bos_listesi.append(bos_sample)

            sample_text = ", ".join(sample_crns[:3]) if sample_crns else "yok"
            kontenjan_text = ", ".join(sample_kontenjan[:3]) if sample_kontenjan else "yok"

            if any(bos > 0 for bos in bos_listesi):
                bos_dersler = [f"`{crn}` ({kont}/{yaz})" for crn, kont, yaz in
                               zip(sample_crns[:3], sample_kontenjan[:3], bos_listesi) if
                               int(yaz.split('/')[1]) < int(yaz.split('/')[0])]
                bos_liste = ", ".join(bos_dersler) if bos_dersler else "yok"

                return (
                    f"‚ùå *CRN '{crn}' bulunamadƒ±*\n\n"
                    f"üîç *'{program_code}' programƒ±nda bu CRN mevcut deƒüil*\n\n"
                    f"üí° *Ama bu programda BO≈û YERLER var!*\n"
                    f"üìã *Mevcut dersler:* `{sample_text}`\n"
                    f"üìä *Durum:* `{kontenjan_text}`\n"
                    f"üéØ *Bo≈ü dersler:* {bos_liste}\n\n"
                    f"üîÑ *Farklƒ± CRN deneyin*\n"
                    f"üìù *√ñrnek: `{program_code}_54321`*"
                )
            else:
                return (
                    f"‚ùå *CRN '{crn}' bulunamadƒ±*\n\n"
                    f"üîç *'{program_code}' programƒ±nda bu CRN mevcut deƒüil*\n\n"
                    f"üìã *Mevcut dersler:* `{sample_text}`\n"
                    f"üìä *Durum:* `{kontenjan_text}`\n\n"
                    f"‚ö†Ô∏è *Bu programda hi√ß bo≈ü yer yok!*\n"
                    f"üîÑ *Farklƒ± program deneyin*\n"
                    f"üìù *√ñrnek: `END_54321`*"
                )

    except requests.exceptions.Timeout:
        print("‚è∞ Zaman a≈üƒ±mƒ± hatasƒ±")
        return f"‚è∞ *Zaman a≈üƒ±mƒ±*\n\nüîÑ *OBS sunucusu yava≈ü, l√ºtfen tekrar deneyin*"
    except requests.exceptions.ConnectionError:
        print("üåê Baƒülantƒ± hatasƒ±")
        return f"üåê *Baƒülantƒ± hatasƒ±*\n\nüîå *ƒ∞nternet baƒülantƒ±nƒ±zƒ± kontrol edin*"
    except Exception as e:
        print(f"üí• Beklenmeyen hata: {e}")
        print(f"   Hata tipi: {type(e)}")
        print(f"   Traceback: {traceback.format_exc()}")
        return f"üí• *Sistem hatasƒ± olu≈ütu*\n\nüîß *Bot sahibine bildirildi*\nüîÑ *L√ºtfen tekrar deneyin*"


async def start_command(update, context: ContextTypes.DEFAULT_TYPE):
    """Bot ba≈ülatma komutu - KONTENJAN TAKƒ∞P A√áIKLAMASI"""
    user = update.effective_user
    chat_id = update.effective_chat.id

    print(f"üöÄ /start - Kullanƒ±cƒ±: {user.first_name} (@{user.username}) - Chat ID: {chat_id}")

    populer_kodlar = []
    test_codes = ['END', 'TUR', 'MAT', 'FIZ', 'KIM', 'BIL', 'ELE', 'MAK', 'BHB']
    for kod in test_codes:
        if kod in PROGRAM_KODLARI:
            populer_kodlar.append(f"`{kod}`")

    populer_liste = ", ".join(populer_kodlar)

    welcome_message = (
        f"üéì *ƒ∞T√ú DERS KONTENJAN BOTU v3.1*\n"
        f"*KONTENJAN TAKƒ∞P MODU*\n\n"
        f"üëã Merhaba {user.first_name}! üëã\n\n"
        f"‚è≥ *Nasƒ±l √ßalƒ±≈üƒ±r?*\n"
        f"‚Ä¢ Kontenjan **yoksa**: *'Kontenjan yok, a√ßƒ±lƒ±nca bildirilecek'*\n"
        f"‚Ä¢ Kontenjan **a√ßƒ±lƒ±nca**: *Ders detaylarƒ± + bo≈ü yer bildirimi*\n\n"
        f"üìù *Kullanƒ±m Formatƒ±:*\n"
        f"*`PROGRAM_KODU_CRN`*\n\n"
        f"üìã *√ñrnek Sorgular:*\n"
        f"‚Ä¢ *`END_12345`* - End√ºstri (ƒ∞ngilizce)\n"
        f"‚Ä¢ *`TUR_67890`* - T√ºrk√ße Programlar\n"
        f"‚Ä¢ *`MAT_11111`* - Matematik\n"
        f"‚Ä¢ *`KIM_54321`* - Kimya\n"
        f"‚Ä¢ *`BHB_15079`* - Biyomedikal M√ºh.\n\n"
        f"üîç *Pop√ºler Kodlar:* {populer_liste}\n\n"
        f"{'‚îÅ' * 35}\n"
        f"üöÄ *Ders sorgulayƒ±n, kontenjan takibi ba≈ülasƒ±n!*"
    )

    await update.message.reply_text(welcome_message, parse_mode='Markdown')


async def help_command(update, context: ContextTypes.DEFAULT_TYPE):
    """Yardƒ±m komutu - KONTENJAN TAKƒ∞P A√áIKLAMASI"""
    user = update.effective_user

    uc_harfli_kodlar = sorted([kod for kod in PROGRAM_KODLARI.keys() if len(kod) == 3])
    ornek_kodlar = ", ".join(uc_harfli_kodlar[:15])

    help_message = (
        f"üÜò *ƒ∞T√ú DERS BOT - YARDIM v3.1*\n\n"
        f"‚è≥ *KONTENJAN TAKƒ∞P Sƒ∞STEMƒ∞*\n"
        f"‚Ä¢ Kontenjan **yoksa**: *'Kontenjan yok, a√ßƒ±lƒ±nca bildirilecek'*\n"
        f"‚Ä¢ Kontenjan **a√ßƒ±lƒ±nca**: *Ders detaylarƒ± (ad, zaman, CRN, kontenjan, bo≈ü yer)*\n\n"
        f"üìñ *Nasƒ±l Kullanƒ±lƒ±r?*\n"
        f"‚Ä¢ *Format:* `PROGRAM_KODU_CRN`\n"
        f"‚Ä¢ *√ñrnek:* `END_12345`\n\n"
        f"üìã *Pop√ºler Program Kodlarƒ±:*\n"
        f"‚Ä¢ *`END`* - End√ºstri M√ºhendisliƒüi (ƒ∞ngilizce)\n"
        f"‚Ä¢ *`TUR`* - T√ºrk√ße Programlar\n"
        f"‚Ä¢ *`MAT`* - Matematik\n"
        f"‚Ä¢ *`FIZ`* - Fizik\n"
        f"‚Ä¢ *`KIM`* - Kimya\n"
        f"‚Ä¢ *`BIL`* - Bilgisayar M√ºhendisliƒüi\n"
        f"‚Ä¢ *`ELE`* - Elektrik-Elektronik\n"
        f"‚Ä¢ *`MAK`* - Makine M√ºhendisliƒüi\n"
        f"‚Ä¢ *`BHB`* - Biyomedikal M√ºhendisliƒüi\n\n"
        f"üîç *Diƒüer Kodlar:* `{ornek_kodlar}...`\n\n"
        f"üìä *Toplam Program:* {len(PROGRAM_KODLARI)}\n"
        f"{'‚îÅ' * 35}\n"
        f"‚ùì *Sorun varsa /start yazƒ±n*"
    )

    await update.message.reply_text(help_message, parse_mode='Markdown')


async def handle_message(update, context: ContextTypes.DEFAULT_TYPE):
    """Kullanƒ±cƒ± mesajlarƒ±nƒ± i≈üle - DAKƒ∞KALIK KONTENJAN TAKƒ∞P"""
    user = update.effective_user
    message_text = update.message.text.strip()
    chat_id = update.effective_chat.id

    print(f"üí¨ {user.first_name} (@{user.username}): '{message_text}' [Chat: {chat_id}]")

    clean_text = message_text.strip().upper()

    if clean_text == '/HELP':
        await help_command(update, context)
        return

    if '_' in clean_text:
        parts = clean_text.split('_')

        if len(parts) == 2:
            program_code, crn_input = parts

            if len(program_code) == 3 and crn_input.isdigit():
                print(f"üîç ƒ∞≈üleniyor: {program_code}_{crn_input}")

                # Rate-limiting: Son istekten bu yana 2 saniye ge√ßti mi?
                current_time = time.time()
                if chat_id in LAST_REQUEST_TIME:
                    elapsed = current_time - LAST_REQUEST_TIME[chat_id]
                    if elapsed < 2:  # 2 saniye bekle
                        await asyncio.sleep(2 - elapsed)

                status_message = await update.message.reply_text(
                    f"üîç *Sorgulanƒ±yor...*\n"
                    f"üìÇ `{program_code}_{crn_input}`"
                    , parse_mode='Markdown'
                )

                try:
                    result = search_course(program_code, crn_input)

                    # Son istek zamanƒ±nƒ± g√ºncelle
                    LAST_REQUEST_TIME[chat_id] = time.time()

                    await status_message.delete()

                    if result:
                        await update.message.reply_text(result, parse_mode='Markdown')

                    # Kontenjan yoksa takibe al
                    if result and "Kontenjan yok" in result:
                        if chat_id not in WATCHED_COURSES:
                            WATCHED_COURSES[chat_id] = []
                        if (program_code, crn_input) not in WATCHED_COURSES[chat_id]:
                            WATCHED_COURSES[chat_id].append((program_code, crn_input))
                            context.application.job_queue.run_repeating(
                                check_course,
                                interval=60,  # Her 1 dakikada bir kontrol
                                data=(chat_id, program_code, crn_input),
                                name=f"{chat_id}_{program_code}_{crn_input}"
                            )
                            print(f"‚è≥ {program_code}_{crn_input} takibe alƒ±ndƒ± (Chat: {chat_id}, 1 dk kontrol)")

                except Exception as e:
                    print(f"üí• Mesaj i≈üleme hatasƒ±: {e}")
                    try:
                        await status_message.delete()
                    except:
                        pass
                    await update.message.reply_text(
                        f"üí• *Beklenmeyen hata olu≈ütu*\n\n"
                        f"üîß *L√ºtfen tekrar deneyin*\n"
                        f"üìû *Hata: {str(e)[:50]}...*"
                        , parse_mode='Markdown'
                    )
                return
            else:
                # Format hatasƒ± (aynƒ± kalƒ±yor)
                error_msg = (
                    f"‚ö†Ô∏è *Ge√ßersiz Format!*\n\n"
                    f"‚ùå Girdiƒüiniz: `{message_text}`\n\n"
                    f"‚úÖ *Doƒüru format:*\n"
                    f"*`√ú√á_HARF_CRN`*\n\n"
                    f"üìã *√ñrnekler:*\n"
                    f"‚Ä¢ *`END_12345`* (3 harf + 5 rakam)\n"
                    f"‚Ä¢ *`TUR_67890`*\n"
                    f"‚Ä¢ *`KIM_11111`*\n"
                    f"‚Ä¢ *`BHB_15079`*\n\n"
                    f"üîç *Program kodu 3 harf olmalƒ±*\n"
                    f"‚ùì *Yardƒ±m: /help*"
                )
                await update.message.reply_text(error_msg, parse_mode='Markdown')
                return

    # Yanlƒ±≈ü format (g√ºncellenmi≈ü)
    format_error = (
        f"‚ö†Ô∏è *Yanlƒ±≈ü Format!*\n\n"
        f"‚ùå Girdiƒüiniz: `{message_text}`\n\n"
        f"‚úÖ *Doƒüru format:*\n"
        f"*`PROGRAM_KODU_CRN`*\n\n"
        f"üìã *√ñrnekler:*\n"
        f"‚Ä¢ *`END_12345`*\n"
        f"‚Ä¢ *`TUR_67890`*\n"
        f"‚Ä¢ *`KIM_11111`*\n"
        f"‚Ä¢ *`BHB_15079`*\n\n"
        f"üîç *Pop√ºler kodlar:* `END, TUR, MAT, FIZ, KIM, BHB`\n"
        f"‚ùì *Detaylƒ± yardƒ±m: /help*\n\n"
        f"‚è≥ *Bot her dakika kontenjan kontrol√º yapar!*\n"
        f"üö® *Komutlar: /stop, /cancel, /status*"
    )
    await update.message.reply_text(format_error, parse_mode='Markdown')


async def error_handler(update, context: ContextTypes.DEFAULT_TYPE):
    """Genel hata yakalama"""
    print(f"üí• TELEGRAM HATA: {context.error}")

    if update and update.message:
        try:
            await update.message.reply_text(
                "‚ùå *Bir hata olu≈ütu*\n\n"
                "üîß *Bot yeniden ba≈ülatƒ±lƒ±yor...*\n"
                "üîÑ *L√ºtfen /start yazarak tekrar deneyin*"
                , parse_mode='Markdown'
            )
        except:
            pass


# Yeni komutlar
async def stop_command(update, context: ContextTypes.DEFAULT_TYPE):
    """Botu durdur"""
    chat_id = update.effective_chat.id
    user = update.effective_user

    print(f"üõë /stop - Kullanƒ±cƒ±: {user.first_name} (@{user.username}) - Chat ID: {chat_id}")

    # Bu chat_id i√ßin takip edilen i≈üleri iptal et
    if chat_id in WATCHED_COURSES:
        for program_code, crn in WATCHED_COURSES[chat_id]:
            job_name = f"{chat_id}_{program_code}_{crn}"
            print(f"   üõë {program_code}_{crn} takibi iptal edildi")
        del WATCHED_COURSES[chat_id]

    stop_message = (
        f"üõë *Bot Durduruldu!*\n\n"
        f"üë§ *Kullanƒ±cƒ±:* {user.first_name}\n"
        f"üì± *Chat ID:* `{chat_id}`\n\n"
        f"‚èπÔ∏è *T√ºm takibler iptal edildi*\n"
        f"üîÑ *Yeniden ba≈ülatmak i√ßin /start*"
    )

    await update.message.reply_text(stop_message, parse_mode='Markdown')
    print(f"‚úÖ Bot {chat_id} i√ßin durduruldu")


async def cancel_command(update, context: ContextTypes.DEFAULT_TYPE):
    """Takip edilen dersleri iptal et"""
    chat_id = update.effective_chat.id
    user = update.effective_user

    print(f"‚ùå /cancel - Kullanƒ±cƒ±: {user.first_name} (@{user.username}) - Chat ID: {chat_id}")

    if chat_id in WATCHED_COURSES and WATCHED_COURSES[chat_id]:
        ders_listesi = [f"`{program_code}_{crn}`" for program_code, crn in WATCHED_COURSES[chat_id]]
        ders_text = ", ".join(ders_listesi)

        # Takip listesini temizle
        del WATCHED_COURSES[chat_id]

        cancel_message = (
            f"‚ùå *Takibler ƒ∞ptal Edildi!*\n\n"
            f"üìã *ƒ∞ptal edilen dersler:*\n"
            f"{ders_text}\n\n"
            f"üîÑ *Yeni ders eklemek i√ßin sorgu yapƒ±n*\n"
            f"üìù *√ñrnek: `END_12345`*"
        )
    else:
        cancel_message = (
            f"‚ÑπÔ∏è *Takip Edilen Ders Yok*\n\n"
            f"üìã *≈ûu anda takip ettiƒüiniz ders bulunmuyor*\n\n"
            f"üîÑ *Yeni ders eklemek i√ßin sorgu yapƒ±n*\n"
            f"üìù *√ñrnek: `END_12345`*"
        )

    await update.message.reply_text(cancel_message, parse_mode='Markdown')
    print(f"‚úÖ {chat_id} i√ßin takibler iptal edildi")


async def status_command(update, context: ContextTypes.DEFAULT_TYPE):
    """Takip edilen dersleri g√∂ster"""
    chat_id = update.effective_chat.id
    user = update.effective_user

    print(f"üìä /status - Kullanƒ±cƒ±: {user.first_name} (@{user.username}) - Chat ID: {chat_id}")

    if chat_id in WATCHED_COURSES and WATCHED_COURSES[chat_id]:
        ders_listesi = []
        for program_code, crn in WATCHED_COURSES[chat_id]:
            ders_listesi.append(f"`{program_code}_{crn}`")

        ders_text = "\n".join(ders_listesi)
        count = len(WATCHED_COURSES[chat_id])

        status_message = (
            f"üìä *Takip Edilen Dersler*\n\n"
            f"üìã *Toplam: {count} ders*\n"
            f"‚è≥ *Her dakika kontrol ediliyor*\n\n"
            f"üìù *Dersler:*\n"
            f"{ders_text}\n\n"
            f"‚ùå *ƒ∞ptal etmek i√ßin: /cancel*\n"
            f"üîÑ *Yeniden ba≈ülatmak i√ßin: /start*"
        )
    else:
        status_message = (
            f"‚ÑπÔ∏è *Takip Edilen Ders Yok*\n\n"
            f"üìã *≈ûu anda takip ettiƒüiniz ders bulunmuyor*\n\n"
            f"üîÑ *Ders eklemek i√ßin sorgu yapƒ±n*\n"
            f"üìù *√ñrnek: `END_12345`*"
        )

    await update.message.reply_text(status_message, parse_mode='Markdown')
    print(f"‚úÖ {chat_id} i√ßin durum g√∂sterildi ({count if 'count' in locals() else 0} ders)")

def create_health_server():
    app = Flask(__name__)
    
    @app.route('/')
    def health():
        return jsonify({
            "status": "healthy",
            "service": "ƒ∞T√ú Ders Bot",
            "uptime": "100%"
        })
    
    @app.route('/health')
    def health_check():
        return jsonify({"status": "ok"})
    
    port = int(os.environ.get('PORT', 8080))
    print(f"üåê Health server port: {port}")
    
    app.run(host='0.0.0.0', port=port, debug=False)

def main():
    """Ana fonksiyon - KONTENJAN TAKƒ∞P MODU"""
    global WATCHED_COURSES, LAST_REQUEST_TIME
    WATCHED_COURSES = {}
    LAST_REQUEST_TIME = {}

    print("ü§ñ ƒ∞T√ú DERS KONTENJAN BOTU v3.1 - DAKƒ∞KALIK KONTENJAN TAKƒ∞P")
    print("=" * 75)
    print(f"üìÇ Toplam {len(PROGRAM_KODLARI)} program kodu y√ºklendi")
    print(f"üîó 1. Kutucuk: Lisans (LS) - SABƒ∞T")
    print(f"üîó 2. Kutucuk: Kullanƒ±cƒ± girdisi -> OBS ID")
    print(f"   üìã √ñrnek: END -> {PROGRAM_KODLARI.get('END', 'YOK')}")
    print(f"   üìã √ñrnek: TUR -> {PROGRAM_KODLARI.get('TUR', 'YOK')}")
    print(f"   üìã √ñrnek: KIM -> {PROGRAM_KODLARI.get('KIM', 'YOK')}")
    print(f"   üìã √ñrnek: BHB -> {PROGRAM_KODLARI.get('BHB', 'YOK')}")
    print(f"üìä Kolonlar: [0]CRN [1]Kod [2]Ad [6]G√ºn [7]Saat [9]KONTENJAN [10]YAZILAN")
    print(f"‚è≥ TAKƒ∞P: Kontenjan yok ‚Üí Mesaj | A√ßƒ±lƒ±nca ‚Üí Detaylƒ± bildirim (HER DAKƒ∞KA)")
    print(f"üö® KOMUTLAR: /stop - Durdur | /cancel - ƒ∞ptal | /status - Durum")
    print("=" * 75)

    app = ApplicationBuilder().token(API_KEY).build()

    # Mevcut handler'lara ekleyin
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stop", stop_command))  # YENƒ∞
    app.add_handler(CommandHandler("cancel", cancel_command))  # YENƒ∞
    app.add_handler(CommandHandler("status", status_command))  # YENƒ∞
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    print("‚úÖ Bot ba≈üarƒ±yla ba≈ülatƒ±ldƒ±! (Dakikalƒ±k Kontenjan Takip Modu)")
    print("üì± Telegram'da test edin:")
    print("   ‚Ä¢ /start - Botu ba≈ülat")
    print("   ‚Ä¢ /stop - Botu durdur")
    print("   ‚Ä¢ /cancel - Takibi iptal et")
    print("   ‚Ä¢ /status - Takip edilen dersleri g√∂ster")
    print("   ‚Ä¢ END_12345 - Test")
    print("   ‚Ä¢ BHB_15079 - Test (35/9 ‚Üí bildirim YOK)")
    print("   ‚Ä¢ BHB_15081 - Test (30/0 ‚Üí takip mesajƒ±)")
    print("   ‚Ä¢ /help - Detaylƒ± yardƒ±m")
    print("‚èπÔ∏è  PyCharm'da durdurmak i√ßin: Ctrl+C")
    print("=" * 75)

    # Health server arka planda
    server_thread = threading.Thread(target=create_health_server, daemon=True)
    server_thread.start()

    print("üåê Health server aktif (502 √ß√∂z√ºld√º)")

    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüëã Bot kullanƒ±cƒ± tarafƒ±ndan durduruldu (Ctrl+C)")
    except Exception as e:
        print(f"\nüí• Kritik hata: {e}")
        print(f"   Hata tipi: {type(e)}")
        # Railway'de input() √ßalƒ±≈ümaz, sessiz kal
        print("üîÑ Railway ortamƒ± algƒ±landƒ±, input beklenmiyor.")



